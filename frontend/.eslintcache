[{"E:\\otherProjects\\MERN\\frontend\\src\\index.js":"1","E:\\otherProjects\\MERN\\frontend\\src\\App.js":"2","E:\\otherProjects\\MERN\\frontend\\src\\reportWebVitals.js":"3","E:\\otherProjects\\MERN\\frontend\\src\\Login.js":"4","E:\\otherProjects\\MERN\\frontend\\src\\Signup.js":"5","E:\\otherProjects\\MERN\\frontend\\src\\onLogin.js":"6","E:\\otherProjects\\MERN\\frontend\\src\\Home.js":"7"},{"size":933,"mtime":1610384613967,"results":"8","hashOfConfig":"9"},{"size":1790,"mtime":1610446493077,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1928,"mtime":1610446598189,"results":"12","hashOfConfig":"9"},{"size":2670,"mtime":1610446203620,"results":"13","hashOfConfig":"9"},{"size":12288,"mtime":1610446709649,"results":"14","hashOfConfig":"9"},{"size":259,"mtime":1610434574082,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"pebnhf",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"E:\\otherProjects\\MERN\\frontend\\src\\index.js",[],["33","34"],"E:\\otherProjects\\MERN\\frontend\\src\\App.js",["35"],"\nimport './App.css';\nimport {useState} from 'react'\nimport {Form,Navbar,Nav,} from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router ,Route,Switch,} from 'react-router-dom'\nimport Login from './Login';\nimport Signup from './Signup';\nimport OnLogin from './onLogin';\nimport {useSelector} from 'react-redux'\nimport {useEffect} from 'react'\nimport Home from './Home';\n\n\n\n\nfunction App() {\n  \nvar [title,setTitle]=useState()\n  \n  const isLogin=useSelector(state=>state.logInCheck)\n\n  \n  const style={\n    color:'lightblue'\n  }\n  const style1={\n    \n      color:'#00FFFF' ,\n     \n      \n     \n      textAlign :'center',\n      paddingTop:'13vw'\n  \n  }\n\n \n  useEffect(()=>{\n   \n   \n  \n},[])\n  \n  return (\n    <div>\n      \n      <Router>\n        {\n     isLogin &&(\n       <Navbar bg=\"light\" variant=\"light\">\n    <Navbar.Brand ><h3 style={style}>T r e l l o</h3></Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\"></Nav.Link>\n      <Nav.Link href=\"#features\"></Nav.Link>\n     \n    </Nav>\n  \n    <Form inline>\n    <Nav >\n   <Nav.Link href=\"/Home\" >Home</Nav.Link>\n   \n    <Nav.Link href=\"/Login\" onClick={()=>{setTitle(false)}}>Login</Nav.Link>\n   \n   \n    \n    \n      <Nav.Link href=\"/Signup\">Signup</Nav.Link>\n    \n     \n    </Nav>\n      \n    </Form>\n   \n\n  \n  </Navbar>\n  \n  )\n  \n\n}\n{ title ?<h1 style={style1}>T R E L L O</h1>:<h1></h1>}\n        <Switch>\n        <Route path='/Signup' exact component={Signup}/>\n          <Route path='/Login' exact component={Login}/>\n          <Route path='/OnLogin' exact component={OnLogin}/>\n        <Route path='/Home' exact component={Home} />\n        <Route path='/' exact component={Home}/>\n         \n        </Switch>\n      </Router>\n    \n    \n    </div>\n  );\n}\n\nexport default App;\n","E:\\otherProjects\\MERN\\frontend\\src\\reportWebVitals.js",[],"E:\\otherProjects\\MERN\\frontend\\src\\Login.js",[],"E:\\otherProjects\\MERN\\frontend\\src\\Signup.js",[],"E:\\otherProjects\\MERN\\frontend\\src\\onLogin.js",["36","37","38","39"],"import { useState } from \"react\"\r\nimport {useSelector,useDispatch} from 'react-redux'\r\nimport {Link,} from 'react-router-dom'\r\nimport {useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport {Nav,Navbar,Form,Button,Modal,Card, Col} from 'react-bootstrap'\r\n\r\n//Function for Modal 1--------------\r\nfunction MyVerticallyCenteredModal(props) {\r\n    const user=useSelector(state=>state.user)\r\n    const [userName,setUserName]=useState()\r\n    const [boardname,setboardname]=useState()\r\n    const [data,setData]=useState([])\r\n    const [bMem, ubmem]=useState([])\r\n    const url='/getAll'\r\n    \r\n    useEffect(async()=>{\r\n        \r\n    await axios.get(url)\r\n    .then(res=>{\r\n        \r\n    setData(res.data)})\r\n    await axios.get('/getsome/'+user)\r\n        .then(res=>{\r\n            let a=bMem\r\n            a.push(res.data[0].name)\r\n            console.log(a)\r\n            setUserName(res.data[0].name)\r\n            ubmem(a)\r\n        })\r\n   },[])\r\n    \r\n    function boardnameHandler(event){\r\n        setboardname(event.target.value)\r\n       \r\n     }\r\n     const handleChange=(event)=>{\r\n         var b=bMem\r\n         b.push(event.target.value)\r\n         var s=new Set(b)\r\n         b=Array.from(s)\r\n\r\nubmem(b)\r\nconsole.log(b)\r\n     }\r\n async function createBoard(){\r\n     if(boardname){\r\n         let url='/createBoard/'\r\n         let url1='/getsomeWithName/'\r\n         \r\n         for(let i=0;i<bMem.length;i++)\r\n         { \r\n            await axios.get(url1+bMem[i])\r\n            .then(async(res)=>{let item=res.data\r\n                let boards=item[0].boards\r\n                boards.push({bName:boardname,bMembers:bMem\r\n                ,toDo:[{tName:'Fix Bug',tMembers:['C','A','D']},\r\n                {tName:'Create Auth Feature',tMembers:['C','A','D']}]\r\n                ,inDev:[{tName:'stage 1',tMembers:['B','A','D']},\r\n                {tName:'stage 2',tMembers:['C','A','D']}]\r\n                ,toReview:[{tName:'Task1',tMembers:['C','A','D']},\r\n                {tName:'Task2',tMembers:['C','A','B']}]\r\n                ,finished:[{tName:'develop UI',tMembers:['B','A','D']},\r\n                {tName:'add logout button',tMembers:['C','A','D']}] })\r\n\r\n                axios.put(url+bMem[i],{boards:boards})\r\n\r\n\r\n            }\r\n            )\r\n\r\n\r\nalert('Board Created')\r\n\r\n          }\r\n    }\r\n    else\r\n    alert('please Enter Board Name')\r\n}\r\n\r\n\r\n    \r\n         \r\n    \r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n           Create Board\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        \r\n         <Col sm=\"4\">\r\n         <h5>Enter board name</h5>\r\n        <Form>\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n    \r\n  \r\n    <Form.Control type=\"text\" onChange={(event)=>boardnameHandler(event)} placeholder=\"boardName\" />\r\n    \r\n    <h5>Add members</h5>\r\n    <select \r\n         \r\n        onChange={(event)=>handleChange(event)} \r\n      >\r\n        <option>select</option>\r\n     {data.map((a,b)=>{\r\n      return (<><option value={a.name}>{a.name} </option>  </>)\r\n    \r\n  })\r\n}\r\n</select>\r\n  <h5>Added Members:</h5>\r\n\r\n  </Form.Group>\r\n  </Form>\r\n  </Col>\r\n  {bMem.map((a,b)=>{\r\n      if(a!==userName)\r\n    return (<p style={{display:'inline',paddingLeft:'1vw'}}>{a}<Button variant=\"danger\" onClick={()=>{let a=bMem\r\n    a.splice(b,1)\r\nubmem(a)}}>-</Button></p>)\r\n})}\r\n\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={createBoard}>Create</Button>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n\r\n//Function for Modal2 ----------------------\r\n  function MyVerticallyCenteredModal2(props) {\r\n    const [taskName, setTaskName]=useState('')\r\n    const [taskType,setTaskType]=useState('')\r\n\r\n    const tasknameHandler=(event)=>{\r\nsetTaskName(event.target.value)\r\n\r\n    }\r\n    const handleChange=(event)=>{\r\nsetTaskType(event.target.value)\r\n    }\r\n    const onTaskCreate=async()=>{\r\n      if(taskType!=='' && taskName!==''){\r\n    let data=props.data\r\n    data.boards[props.index][taskType].push({tName:taskName,tMembers:['C','A','B']})\r\n    await axios.put('/moveTasks/'+props.data.email,data)\r\n    alert('Task Created')\r\n      }\r\n      else\r\n      alert(\"please fill in all the fields\")\r\n\r\n    }\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Create Task\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Col sm=\"4\">\r\n         <h5>Enter board name</h5>\r\n        <Form>\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n    \r\n  \r\n    <Form.Control type=\"text\" onChange={(event)=>tasknameHandler(event)} placeholder=\"taskName\" />\r\n    \r\n    <h5>Select Category</h5>\r\n    <select \r\n         \r\n        onChange={(event)=>handleChange(event)} \r\n      >\r\n        <option value=''>select</option>\r\n        <option value='toDo'>to Do</option>\r\n        <option value='inDev'>in Dev</option>\r\n        <option value='toReview'>to be reviewed</option>\r\n        <option value='finished'> finished</option>\r\n</select>\r\n  \r\n\r\n  </Form.Group>\r\n  </Form>\r\n  </Col>\r\n  \r\n          \r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <Button onClick={onTaskCreate}>Create</Button>\r\n          <Button onClick={props.onHide}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  \r\n\r\n //component--------------- \r\nfunction OnLogin(){\r\n    const [data,setData]=useState({boards:[]})\r\n   const [flag, setFlag]=useState(true)\r\n   const [index,setIndex]=useState()\r\n  \r\n    const user=useSelector(state=>state.user)\r\n    const url='/getsome/'+user\r\n   \r\n    axios.get(url)\r\n    .then(res=>{\r\n    \r\nsetData(res.data[0])})\r\n    \r\n    const dispatch=useDispatch()\r\n\r\n    useEffect(()=>{\r\n      \r\n     \r\n        dispatch({type:'IN'})\r\n    })\r\n    useEffect(()=>{\r\n      if(user===''){\r\n        alert('please login again')\r\n       \r\n      }\r\n      setFlag(localStorage.getItem('flag'))\r\n     \r\n       \r\n    },[])\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const style={\r\n        color:'#1E90FF' ,\r\n        padding:'2vw',\r\n        paddingLeft:'4vw',\r\n        display: 'inline-block'\r\n    }\r\n    const style1={\r\n        color:'#00FFFF' ,\r\n       \r\n        paddingLeft:'70vw',\r\n        display: 'inline-block'\r\n    }\r\n  \r\nfunction onBoardClick(i){\r\nsetFlag(false)\r\nconsole.log(i)\r\nsetIndex(i)\r\nlocalStorage.setItem('flag',false)\r\n}\r\nconst goBack=()=>{\r\n  setFlag(true)\r\n  localStorage.setItem('flag',true)\r\n}\r\nconst moveTo=async(event,c,i)=>{\r\n  let current=c\r\n  let to=event.target.value\r\n  if(current!==to && current!==''){\r\n     let boards=data.boards\r\n     boards[index][to].push(boards[index][current][i])\r\n     boards[index][current].splice(i,1)\r\n     await axios.put('/moveTasks/'+user,{boards:boards})\r\n  }\r\n\r\n}\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n\r\n\r\n           <Navbar bg=\"primary\" variant=\"dark\">\r\n    <Navbar.Brand >T R E L L O</Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link >Welcome, {user}</Nav.Link>\r\n     \r\n    </Nav>\r\n    <Form inline>\r\n     <Link to='/Login'>\r\n      <Button variant=\"outline-light\">Logout</Button>\r\n      </Link>\r\n    </Form>\r\n  </Navbar> \r\n  { flag &&\r\n  <div>\r\n  <h3 style={style}>Boards</h3>\r\n  \r\n  <div style={style1}>\r\n  <>\r\n      <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n        Create Board\r\n      </Button>\r\n\r\n      <MyVerticallyCenteredModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n      />\r\n    </>\r\n</div>\r\n{data.boards.map((x,i)=>{\r\n   return( <div style={{ paddingLeft:'2vw' ,display:'inline-block'}}>\r\n<Card style={{ width: '18rem', }}>\r\n  <Card.Body>\r\n    <Card.Title>{x.bName}</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Members:</Card.Subtitle>\r\n    \r\n      <Card.Text>\r\n           {x.bMembers[0]} and others..\r\n        </Card.Text>\r\n  \r\n    \r\n    <br></br>\r\n    <Button onClick={()=>onBoardClick(i)}>view</Button>\r\n   \r\n  </Card.Body>\r\n</Card>\r\n</div>)\r\n})}\r\n\r\n</div>\r\n}\r\n{ !flag &&\r\n\r\n<>\r\n  <div style={{paddingTop:'1vw',paddingLeft:'2vw',display:'inline-block'}}> <Button onClick={goBack} >Go Back</Button> </div>\r\n  <div style={{paddingTop:'1vw',paddingLeft:'80vw',display:'inline-block'}}> <Button variant=\"primary\" onClick={() => setModalShow(true)}>\r\n        Create Task\r\n      </Button>\r\n\r\n      <MyVerticallyCenteredModal2\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)} index={index} data={data}/> </div>\r\n\r\n  <div style={{padding:'2vw',}}>\r\n<h3 style={{color:'#ff0000'}}>to do :</h3>\r\n\r\n{data.boards[index].toDo.map((a,b)=>{\r\n    return (\r\n      <div style={{padding:'1vw',display:\"inline-block\"}} >\r\n<Card style={{ width: '16rem',color:'black' }}>\r\n  <Card.Body>\r\n    <Card.Title>{a.tName}</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Task :</Card.Subtitle>\r\n    <Card.Text>\r\n    to complete \" {a.tName} \"\r\n    </Card.Text>\r\n    <h5 style={{color:'\t#00bfff'}}>Move to :</h5>\r\n    <select onChange={(event)=>{moveTo(event,'toDo',b)}} value=''>\r\n    <option>select</option>\r\n      <option value='toDo'>to do</option>\r\n      <option value='inDev'>to dev</option>\r\n      <option value='toReview'>to review</option>\r\n      <option value='finished'>finished</option>\r\n    </select>\r\n   \r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n    )\r\n})}\r\n\r\n</div>\r\n\r\n\r\n<div style={{ padding:'2vw' }} >\r\n<h3 style={{color:'#ff8000'}}>in development :</h3>\r\n{data.boards[index].inDev.map((a,b)=>{\r\n    return (\r\n      <div style={{padding:'1vw',display:\"inline-block\"}}>\r\n<Card style={{ width: '16rem',color:'black' }}>\r\n  <Card.Body>\r\n    <Card.Title>{a.tName}</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Task :</Card.Subtitle>\r\n    <Card.Text>\r\n      to complete \" {a.tName} \"\r\n    </Card.Text>\r\n    <h5 style={{color:'\t#00bfff'}}>Move to :</h5>\r\n    <select onChange={(event)=>{moveTo(event,'inDev',b)}} value=''>\r\n    <option>select</option>\r\n      <option value='toDo'>to do</option>\r\n      <option value='inDev'>to dev</option>\r\n      <option value='toReview'>to review</option>\r\n      <option value='finished'>finished</option>\r\n    </select>\r\n   \r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n    )\r\n})}\r\n\r\n</div>\r\n\r\n\r\n<div  style={{padding:'2vw'}}>\r\n<h3 style={{color:'#80ff00'}}>to be reviewed :</h3>\r\n{data.boards[index].toReview.map((a,b)=>{\r\n    return (\r\n      <div style={{padding:'1vw',display:\"inline-block\"}}>\r\n<Card style={{ width: '16rem',color:'black' }}>\r\n  <Card.Body>\r\n    <Card.Title>{a.tName}</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Task :</Card.Subtitle>\r\n    \r\n    <Card.Text >\r\n    to complete \" {a.tName} \"\r\n    </Card.Text>\r\n    \r\n    <h5 style={{color:'\t#00bfff'}}>Move to :</h5>\r\n    <select onChange={(event)=>{moveTo(event,'toReview',b)}} value=''>\r\n    <option>select</option>\r\n      <option value='toDo'>to do</option>\r\n      <option value='inDev'>to dev</option>\r\n      <option value='toReview'>to review</option>\r\n      <option value='finished'>finished</option>\r\n    </select>\r\n   \r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n    )\r\n})}\r\n\r\n</div>\r\n\r\n\r\n<div  style={{ padding:'2vw'}}>\r\n<h3 style={{color:'#008c00',}}>finished :</h3>\r\n{data.boards[index].finished.map((a,b)=>{\r\n    return (\r\n      \r\n      <div style={{padding:'1vw',display:\"inline-block\"}}>\r\n<Card style={{ width: '16rem', color:'black'}}>\r\n  <Card.Body>\r\n    <Card.Title>{a.tName}</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\">Task :</Card.Subtitle>\r\n    <Card.Text>\r\n    to complete \" {a.tName} \"\r\n    </Card.Text>\r\n    <h5 style={{color:'\t#00bfff'}}>Move to :</h5>\r\n    <select onChange={(event)=>{moveTo(event,'finished',b)}} value=''>\r\n    <option>select</option>\r\n      <option value='toDo'>to do</option>\r\n      <option value='inDev'>to dev</option>\r\n      <option value='toReview'>to review</option>\r\n      <option value='finished'>finished</option>\r\n    </select>\r\n   \r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n    )\r\n})}\r\n\r\n</div>\r\n\r\n</>\r\n}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OnLogin","E:\\otherProjects\\MERN\\frontend\\src\\Home.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":83,"column":46,"nodeType":"46","endLine":83,"endColumn":50},{"ruleId":"47","severity":1,"message":"48","line":17,"column":15,"nodeType":"49","endLine":31,"endColumn":5},{"ruleId":"47","severity":1,"message":"50","line":31,"column":6,"nodeType":"51","endLine":31,"endColumn":8,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":124,"column":18,"nodeType":"49","messageId":"55","endLine":124,"endColumn":20},{"ruleId":"47","severity":1,"message":"56","line":243,"column":7,"nodeType":"51","endLine":243,"endColumn":9,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'bMem' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["60"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [bMem, user]",{"range":"66","text":"67"},"Update the dependencies array to be: [user]",{"range":"68","text":"69"},[939,941],"[bMem, user]",[6281,6283],"[user]"]